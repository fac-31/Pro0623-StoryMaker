openapi: 3.0.0
info:
  title: Story Maker API
  version: 1.0.0
  description: API for the Story Maker application - A comprehensive storyboard creation and management system
  contact:
    name: Story Maker Team
  license:
    name: MIT

servers:
  - url: /api
    description: API base path

paths:
  # Storyboard Endpoints
  /storyboard/start:
    post:
      tags:
        - Storyboard
      summary: Start a new storyboard creation
      description: Creates a new storyboard with initial user prompts and saves it to the database. Can be associated with a team if team_id is provided.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompts:
                  $ref: '#/components/schemas/UserPrompt'
                team_id:
                  type: string
                  nullable: true
                  description: Optional team ID to associate the storyboard with a team
              required:
                - prompts
      responses:
        '200':
          description: Storyboard created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                  insertedId:
                    type: string
        '404':
          description: User not found or invalid team ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to save storyboard or user not in team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /storyboard/progress/{id}:
    get:
      tags:
        - Storyboard
      summary: Get storyboard progress with real-time updates
      description: Returns a server-sent events stream for real-time storyboard creation or editing progress
      parameters:
        - name: id
          in: path
          required: true
          description: Storyboard ID
          schema:
            type: string
        - name: edit
          in: query
          required: false
          description: Set to 'true' to enable edit mode for existing storyboard
          schema:
            type: boolean
        - name: slideNumber
          in: query
          required: false
          description: Specific slide number to edit (used with edit=true)
          schema:
            type: integer
      responses:
        '200':
          description: Server-sent events stream
          content:
            text/event-stream:
              schema:
                type: string
        '500':
          description: ID not provided or invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /storyboard/edit:
    post:
      tags:
        - Storyboard
      summary: Edit a specific slide in a storyboard
      description: Updates a specific slide outline in an existing storyboard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newSlideOutline:
                  $ref: '#/components/schemas/SlideOutline'
                slideNumber:
                  type: integer
                  description: The slide number to edit (1-based)
                storyboard_id:
                  type: string
                  description: The ID of the storyboard to edit
              required:
                - newSlideOutline
                - slideNumber
                - storyboard_id
      responses:
        '200':
          description: Slide updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: string
                  modifiedCount:
                    type: integer
        '404':
          description: User not found or storyboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database update failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /storyboard/add-slide:
    post:
      tags:
        - Storyboard
      summary: Add a new slide to a storyboard
      description: Inserts a new slide outline at a specific index in a storyboard, re-indexing all subsequent slides.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storyboard_id:
                  type: string
                  description: The ID of the storyboard to modify.
                insertionIndex:
                  type: integer
                  description: The index at which to insert the new slide.
                newSlideOutline:
                  $ref: '#/components/schemas/SlideOutline'
      responses:
        '200':
          description: Successfully added the slide and returned the storyboard ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        '400':
          description: Bad Request - Missing required fields.
        '404':
          description: Not Found - The specified storyboard could not be found.

  /storyboard/delete-slide:
    post:
      tags:
        - Storyboard
      summary: Delete a slide from a storyboard
      description: Deletes a slide at a specific index in a storyboard, re-indexing all subsequent slides.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storyboard_id:
                  type: string
                  description: The ID of the storyboard to modify.
                slideIndex:
                  type: integer
                  description: The index of the slide to delete.
      responses:
        '200':
          description: Successfully deleted the slide and returned the updated storyboard.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  storyboard:
                    $ref: '#/components/schemas/Storyboard'
        '400':
          description: Bad Request - Missing required fields.
        '404':
          description: Not Found - The specified storyboard could not be found.

  /storyboard/generate-game:
    post:
      tags:
        - Storyboard
      summary: Generate interactive game from storyboard
      description: Creates an interactive HTML game from a storyboard with clickable elements and game mechanics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storyboardId:
                  type: string
                  description: The ID of the storyboard to generate a game from
              required:
                - storyboardId
      responses:
        '200':
          description: Game generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  gamePath:
                    type: string
                    description: Path to the generated game HTML file
        '400':
          description: Missing storyboardId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Storyboard not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: OpenAI API key not configured or generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /storyboard/logs:
    get:
      tags:
        - Storyboard
      summary: Get storyboard processing logs
      description: Retrieves logs from storyboard processing operations
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  # Teams Endpoints
  /teams/create:
    post:
      tags:
        - Teams
      summary: Create a new team
      description: Creates a new team with the authenticated user as admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Team name
              required:
                - name
      responses:
        '200':
          description: Team created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  insertedId:
                    type: string
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to insert team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /teams/getall:
    get:
      tags:
        - Teams
      summary: Get all teams
      description: Retrieves all teams from the database
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '500':
          description: Failed to get teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /teams/removeuser:
    post:
      tags:
        - Teams
      summary: Remove user from team
      description: Removes a specified user from a team (requires team edit permissions)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: string
                  description: Team ID
                user_id:
                  type: string
                  description: User ID to remove
              required:
                - team_id
                - user_id
      responses:
        '200':
          description: User removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: User not logged in, insufficient permissions, or trying to remove self
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to remove user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /teams/updateuser:
    post:
      tags:
        - Teams
      summary: Update user role in team
      description: Updates a user's role within a team (requires team edit permissions)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_id:
                  type: string
                  description: Team ID
                user_id:
                  type: string
                  description: User ID to update
                role:
                  type: string
                  enum: [user, admin]
                  description: New role for the user
              required:
                - team_id
                - user_id
                - role
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '401':
          description: User not logged in, insufficient permissions, or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Users Endpoints
  /users/signup:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Creates a new user account in both Supabase and MongoDB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  supabase:
                    type: string
                    description: Supabase user ID
                  mongodb:
                    type: string
                    description: MongoDB document ID
        '500':
          description: Signup failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user information
      description: Retrieves the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SafeUser'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to get user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/getall:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieves all users from the database (safe format without sensitive data)
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SafeUser'
        '500':
          description: Failed to get users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT token from Supabase authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error

    UserPrompt:
      type: object
      properties:
        numSlides:
          type: integer
          description: Number of slides for the storyboard
          minimum: 1
        concept:
          type: string
          description: The main concept or idea for the story
        storyStyle:
          type: string
          description: Visual and narrative style of the story
        targetAudience:
          type: string
          description: Intended audience for the story
        genre:
          type: string
          description: Genre of the story
      required:
        - numSlides
        - concept
        - storyStyle
        - targetAudience
        - genre

    UserSignup:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password
          minLength: 6
        full_name:
          type: string
          description: User's full name
        display_name:
          type: string
          description: User's display name
      required:
        - email
        - password
        - full_name
        - display_name

    Character:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum: [protagonist, antagonist, mentor, supporting, narrator]
        description:
          type: string
        emotions:
          type: array
          items:
            type: string
        position:
          type: string
          enum: [left, center, right, background, foreground]
      required:
        - name
        - role
        - description
        - emotions
        - position

    SlideDialogue:
      type: object
      properties:
        character:
          type: string
        line:
          type: string
      required:
        - character
        - line

    SlideText:
      type: object
      properties:
        dialogue:
          type: array
          items:
            $ref: '#/components/schemas/SlideDialogue'
      required:
        - dialogue

    SlideOutline:
      type: object
      properties:
        slideId:
          type: integer
        timestamp:
          type: string
        durationSeconds:
          type: number
        sceneTitle:
          type: string
        text:
          $ref: '#/components/schemas/SlideText'
        characters:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        sceneDescription:
          type: string
        visualStyle:
          type: string
        cameraAngle:
          type: string
      required:
        - slideId
        - timestamp
        - durationSeconds
        - sceneTitle
        - text
        - characters
        - sceneDescription
        - visualStyle
        - cameraAngle

    StoryMetadata:
      type: object
      properties:
        title:
          type: string
        totalDuration:
          type: string
        genre:
          type: string
        style:
          type: string
        targetAudience:
          type: string
      required:
        - title
        - totalDuration
        - genre
        - style
        - targetAudience

    StoryOutline:
      type: object
      properties:
        storyMetadata:
          $ref: '#/components/schemas/StoryMetadata'
        slideOutlines:
          type: array
          items:
            $ref: '#/components/schemas/SlideOutline'
      required:
        - storyMetadata
        - slideOutlines

    VisualSlide:
      type: object
      properties:
        slideNumber:
          type: integer
        imageGenerated:
          type: boolean
        imagePrompt:
          type: string
        imageUrl:
          type: string
      required:
        - slideNumber
        - imageGenerated

    Storyboard:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        status:
          type: string
          enum: [none, generating-outline, generating-image, uploading-image, done]
        prompts:
          $ref: '#/components/schemas/UserPrompt'
        currentSlide:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        storyOutline:
          $ref: '#/components/schemas/StoryOutline'
        visualSlides:
          type: array
          items:
            $ref: '#/components/schemas/VisualSlide'
      required:
        - _id
        - status
        - prompts
        - currentSlide
        - createdAt
        - updatedAt
        - storyOutline
        - visualSlides

    TeamUser:
      type: object
      properties:
        user:
          type: string
          description: MongoDB ObjectId of the user
        role:
          type: string
          enum: [user, admin]
      required:
        - user
        - role

    Team:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        name:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/TeamUser'
        projects:
          type: array
          items:
            type: string
            description: MongoDB ObjectId of projects
      required:
        - _id
        - name
        - users
        - projects

    SafeUser:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
        name:
          type: string
        projects:
          type: array
          items:
            type: string
            description: MongoDB ObjectId of projects
        teams:
          type: array
          items:
            type: string
            description: MongoDB ObjectId of teams
      required:
        - _id
        - name
        - projects
        - teams

tags:
  - name: Storyboard
    description: Storyboard creation and management operations
  - name: Teams
    description: Team management operations
  - name: Users
    description: User management and authentication operations
  - name: AI Agent
    description: AI-powered storyboard generation operations
